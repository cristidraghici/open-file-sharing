openapi: 3.1.0
info:
  title: Open File Sharing API
  version: 1.0.0
  description: |
    API specification for the Open File Sharing system.
    Provides endpoints for secure file upload, sharing, and management.

servers:
  - url: /api/v1
    description: API v1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "User friendly message"
            details:
              type: object
              additionalProperties: true

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "********"

    AuthResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJSUzI1NiIs..."
            user:
              $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        password:
          type: string
          format: password
        role:
          type: string
          enum: [user, admin]

    FileMetadata:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fileName:
          type: string
        fileType:
          type: string
        size:
          type: integer
          format: int64
        uploadedBy:
          type: string
          format: uuid
        uploadedAt:
          type: string
          format: date-time
        isPublic:
          type: boolean
          default: false

    UploadRequest:
      type: object
      required:
        - fileName
        - fileType
        - size
      properties:
        fileName:
          type: string
        fileType:
          type: string
          enum: [image, video, document, other]
        size:
          type: integer
          format: int64
        isPublic:
          type: boolean
          default: false

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer

    Links:
      type: object
      properties:
        first:
          type: string
        last:
          type: string
        prev:
          type: string
          nullable: true
        next:
          type: string
          nullable: true

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      security: []
      tags:
        - Authentication
      summary: Authenticate user and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      responses:
        "200":
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /media/uploads:
    post:
      tags:
        - Media
      summary: Upload multiple files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileMetadata"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /media/list:
    get:
      tags:
        - Media
      summary: List uploaded files
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
        - name: type
          in: query
          schema:
            type: string
            enum: [image, video, document, other]
      responses:
        "200":
          description: List of files
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FileMetadata"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  links:
                    $ref: "#/components/schemas/Links"

  /media/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Media
      summary: Get file by ID
      responses:
        "200":
          description: File details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/FileMetadata"
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - Media
      summary: Delete file
      responses:
        "204":
          description: File deleted successfully
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized to delete file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
