/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login": {
    /** Authenticate user and get token */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          content: {
            "application/json": components["schemas"]["AuthResponse"];
          };
        };
        /** @description Invalid credentials */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/me": {
    /** Get current user information */
    get: {
      responses: {
        /** @description Current user information */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["User"];
            };
          };
        };
        /** @description Not authenticated */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/media/upload": {
    /** Upload a new file */
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
            metadata?: components["schemas"]["UploadRequest"];
          };
        };
      };
      responses: {
        /** @description File uploaded successfully */
        201: {
          content: {
            "application/json": {
              data?: components["schemas"]["FileMetadata"];
            };
          };
        };
        /** @description Invalid request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description File too large */
        413: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/media/list": {
    /** List uploaded files */
    get: {
      parameters: {
        query?: {
          page?: number;
          per_page?: number;
          type?: "image" | "video" | "document" | "other";
        };
      };
      responses: {
        /** @description List of files */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["FileMetadata"][];
              meta?: components["schemas"]["PaginationMeta"];
              links?: components["schemas"]["Links"];
            };
          };
        };
      };
    };
  };
  "/media/{id}": {
    /** Get file by ID */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description File details */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["FileMetadata"];
            };
          };
        };
        /** @description File not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete file */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description File deleted successfully */
        204: {
          content: never;
        };
        /** @description Not authorized to delete file */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description File not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      error?: {
        /** @example VALIDATION_ERROR */
        code?: string;
        /** @example User friendly message */
        message?: string;
        details?: {
          [key: string]: unknown;
        };
      };
    };
    LoginRequest: {
      /** @example user@example.com */
      username: string;
      /**
       * Format: password
       * @example ********
       */
      password: string;
    };
    AuthResponse: {
      data?: {
        /** @example eyJhbGciOiJSUzI1NiIs... */
        token?: string;
        user?: components["schemas"]["User"];
      };
    };
    User: {
      /** Format: uuid */
      id?: string;
      username?: string;
      /** Format: password */
      password?: string;
      /** @enum {string} */
      role?: "user" | "admin";
    };
    FileMetadata: {
      /** Format: uuid */
      id?: string;
      fileName?: string;
      fileType?: string;
      /** Format: int64 */
      size?: number;
      /** Format: uuid */
      uploadedBy?: string;
      /** Format: date-time */
      uploadedAt?: string;
      /** @default false */
      isPublic?: boolean;
    };
    UploadRequest: {
      fileName: string;
      /** @enum {string} */
      fileType: "image" | "video" | "document" | "other";
      /** Format: int64 */
      size: number;
      /** @default false */
      isPublic?: boolean;
    };
    PaginationMeta: {
      page?: number;
      per_page?: number;
      total?: number;
    };
    Links: {
      first?: string;
      last?: string;
      prev?: string | null;
      next?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
